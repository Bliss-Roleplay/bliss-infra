---

- name: Create / Run {{ container }} container
  docker_container:
    name: "{{ container }}"
    image: lscr.io/linuxserver/sonarr:latest
    networks:
      - name: "swag_{{ network }}_bridge"
    pull: true
    state: started
    env:
      PUID: "{{ target_username_puid }}"
      PGID: "{{ target_username_pgid }}"
      TZ: "{{ timezone }}"
    ports:
      - 8989:8989
    volumes:
      - "{{ docker_dir }}/{{ container }}:/config"
      - "{{ mergerfs_root }}/downloads:/downloads"
      - "{{ mergerfs_root }}/media/tv:/tv"
    restart_policy: unless-stopped

- name: Set target_container to {{ container }}
  set_fact:
    target_container: "{{ container }}"

- include_tasks: get_single_docker_container_ready.yml

- name: Wait until {{ container }} api key exists
  ansible.builtin.wait_for:
    path: "{{ docker_dir }}/{{ container }}/config.xml"
    search_regex: "ApiKey"

- name: pip install lxml for xml module 
  pip:
    name: lxml>=2.3.0

- name: Search {{ container }} config for api key
  xml:
    path: "{{ docker_dir }}/{{ container }}/config.xml"
    xpath: /Config/ApiKey
    content: "text"
  register: sonarr_api_key_xml

- name: Retrieve {{ container }} api key
  set_fact:
    sonarr_api_key: "{{ sonarr_api_key_xml.matches[0].ApiKey }}"
  failed_when: sonarr_api_key_xml is not defined or sonarr_api_key_xml.count == 0

- name: Disable {{ container }} analytics
  xml:
    path: "{{ docker_dir }}/{{ container }}/config.xml"
    xpath: /Config/AnalyticsEnabled
    value: "False"

- debug:
    var: sonarr_api_key

- name: Restart {{ container }} container
  docker_container:
    name: "{{ container }}"
    image: lscr.io/linuxserver/sonarr:latest
    state: started
    restart: true

- name: Wait until {{ container }} web portal is available
  uri:
    url: "https://{{ subdomain }}.{{ swag_network_domains[network] }}/ping"
    method: GET
    status_code: 200
  register: result
  until: result.status == 200
  retries: 5
  delay: 5

- debug:
    msg: "{{ item | combine(download_client_defaults) | combine({ 'fields': item.fields | dict2items(key_name='name', value_name='value') }) }}"
  loop: "{{ download_clients }}"

- name: Fetch existing {{ container }} download clients
  uri:
    url: "https://{{ subdomain }}.{{ swag_network_domains[network] }}/api/v3/downloadclient"
    method: GET
    headers:
      X-Api-Key: "{{ sonarr_api_key }}"
  register: download_clients_resp

- name: Get existing {{ container }} download client names
  set_fact:
    download_clients_existing: "{{ download_clients_resp.json | selectattr('name', 'defined') | map(attribute='name') }}"

- name: Add download clients to {{ container }}
  uri:
    url: "https://{{ subdomain }}.{{ swag_network_domains[network] }}/api/v3/downloadclient"
    method: POST
    body_format: json
    status_code: [200, 201]
    headers:
      X-Api-Key: "{{ sonarr_api_key }}"
    body: "{{ item | combine(download_client_defaults) | combine({ 'fields': item.fields | dict2items(key_name='name', value_name='value') }) }}"
  loop: "{{ download_clients }}"
  when: not (item.name in download_clients_existing)

- name: Retrieve jackett indexers
  uri:
    url: "https://{{ jackett_url }}/api/v2.0/indexers?configured=true"
    method: GET
    headers:
      Cookie: "{{ jackett_cookie }}"
  register: jackett_indexers_resp

- name: Extract jackett indexers from response
  set_fact:
    jackett_indexers: "{{ jackett_indexers_resp.json }}"

- name: Retrieve {{ container }} indexers
  uri:
    url: "https://{{ subdomain }}.{{ swag_network_domains[network] }}/api/v3/indexer"
    method: GET
    headers:
      X-Api-Key: "{{ sonarr_api_key }}"
  register: sonarr_indexers_resp

- name: Get existing {{ container }} indexer names
  set_fact:
    sonarr_indexers_existing: "{{ sonarr_indexers_resp.json | selectattr('name', 'defined') | map(attribute='name') }}"

- name: Setup {{ container }} indexers
  set_fact:
    sonarr_indexers: "{{ sonarr_indexers | default([]) + [ indexer | combine(indexer_defaults) | combine({ 'fields': { 'categories': category.tv.includes | difference(category.tv.excludes) | map(attribute='ID'), 'animeCategories': category.anime.includes | difference(category.anime.excludes) | map(attribute='ID') } | combine(indexer_defaults.fields) | combine(indexer.fields) }) ] }}"
  loop: "{{ jackett_indexers }}"
  when: not (indexer.name in sonarr_indexers_existing)
  vars:
    indexer:
      name: "{{ jackett_indexer_prefix }}-{{ item.id }}"
      fields:
        baseUrl: "https://{{ jackett_url }}/api/v2.0/indexers/{{ item.id }}/results/torznab"
        apiKey: "{{ jackett_api_key }}"
    category:
      tv:
        includes: "{{ item.caps | selectattr('Name', 'search', [ '(?=.*' ] | product(tv_categories.include | map('join', ')(?=.*')) | map('join') | list | product([ ')' ]) | map('join') | list | join('|'), ignorecase=True) | unique }}"
        excludes: "{% if tv_categories.exclude | length > 0 %}{{ item.caps | selectattr('Name', 'search', [ '(?=.*' ] | product(tv_categories.exclude | map('join', ')(?=.*')) | map('join') | list | product([ ')' ]) | map('join') | list | join('|'), ignorecase=True) | unique }}{% else %}{{ [] }}{% endif %}"
      anime:
        includes: "{{ item.caps | selectattr('Name', 'search', [ '(?=.*' ] | product(anime_categories.include | map('join', ')(?=.*')) | map('join') | list | product([ ')' ]) | map('join') | list | join('|'), ignorecase=True) | unique }}"
        excludes: "{% if anime_categories.exclude | length > 0 %}{{ item.caps | selectattr('Name', 'search', [ '(?=.*' ] | product(anime_categories.exclude | map('join', ')(?=.*')) | map('join') | list | product([ ')' ]) | map('join') | list | join('|'), ignorecase=True) | unique }}{% else %}{{ [] }}{% endif %}"

- name: Add {{ container }} indexers
  uri:
    url: "https://{{ subdomain }}.{{ swag_network_domains[network] }}/api/v3/indexer"
    method: POST
    body_format: json
    status_code: [200, 201]
    headers:
      X-Api-Key: "{{ sonarr_api_key }}"
    body: "{{ item | combine({ 'fields': item.fields | dict2items(key_name='name', value_name='value') }) }}"
  loop: "{{ sonarr_indexers }}"
  when: "sonarr_indexers is defined and sonarr_indexers | length > 0"